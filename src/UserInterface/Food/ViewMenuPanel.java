/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Food;

import Business.Customer.Customer;
import Business.Enterprise.Enterprise;
import Business.Food.FoodMenuItem;
import Business.Food.FoodOrder;
import Business.Food.FoodOrderCatalog;
import Business.Organization.CookOrganization;
import Business.Organization.Organization;
import Business.Rooms.Room;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FoodRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vidya
 */
public class ViewMenuPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewMenuPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private HashMap<String,String> fooditem;
    private FoodOrder foodOrder;
    private Customer customer;
    private Enterprise enterprise;
    public ViewMenuPanel(JPanel userProcessContainer,UserAccount userAccount,Enterprise enterprise) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.userAccount=userAccount;
        this.customer=userAccount.getCustomer();
        foodOrder=new FoodOrder();
        fooditem=populateFoodItems();
        this.enterprise=enterprise;
        populateFoodTypeCombo();
        populateFoodRequestTable();
    }
    
    private HashMap<String,String> populateFoodItems(){
    
        HashMap<String,String> food = new HashMap<>();
        food.put("Pizza","BBQ Chicken Pizza:10.50,Cheese Pizza:8.30");
        food.put("Soup","Chicken Noodle:2.99,Harvest Pumpkin:3.05");
        food.put("Salad","Chicken Salad:7.80,Caeser Salad:4.30");
        food.put("Ice-Cream","Chocalate:6.50,Vannila:5.30");
        return food;
    }  
    
    private void populateFoodTypeCombo(){
        foodTypeCombo.removeAllItems();
        foodTypeCombo.addItem("Pizza");
        foodTypeCombo.addItem("Soup");
        foodTypeCombo.addItem("Salad");
        foodTypeCombo.addItem("Ice-Cream");
    }
    
    private void populateTable(){
        if(foodTypeCombo.getSelectedItem()==null){
            return;
        }
        String item=foodTypeCombo.getSelectedItem().toString();
        String value=fooditem.get(item);
        
        DefaultTableModel model=(DefaultTableModel)menuTable.getModel();
        model.setRowCount(0);
        Object[] row=new Object[2];
        String[] splitType = value.split(",");
        for(int i=0;i<splitType.length;i++){            
            String[] splitAll = splitType[i].split(":");
            row[0]=splitAll[0];
            row[1]=splitAll[1];
            model.addRow(row);
        }
    }
    
    private void populateOrderTable(){

        DefaultTableModel model=(DefaultTableModel)orderItemTable.getModel();
        model.setRowCount(0);
        
        for(FoodMenuItem menuItem: foodOrder.getFoodOrderList()){
            Object[] row=new Object[3];
            row[0]=menuItem.getName();
            row[1]=menuItem.getPrice();
            row[2]=menuItem.getQuantity();
            model.addRow(row);
        }
        
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        foodTypeCombo = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        menuTable = new javax.swing.JTable();
        quantityText = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        checkoutButton = new javax.swing.JButton();
        messageText = new javax.swing.JTextField();
        backjButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        foodRequestTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderItemTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setLayout(null);

        foodTypeCombo.setFont(new java.awt.Font("Monotype Corsiva", 3, 24)); // NOI18N
        foodTypeCombo.setForeground(new java.awt.Color(102, 0, 0));
        foodTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        foodTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foodTypeComboActionPerformed(evt);
            }
        });
        add(foodTypeCombo);
        foodTypeCombo.setBounds(40, 100, 220, 34);

        menuTable.setFont(new java.awt.Font("Monotype Corsiva", 2, 24)); // NOI18N
        menuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(menuTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(40, 160, 341, 123);

        quantityText.setFont(new java.awt.Font("Monotype Corsiva", 2, 24)); // NOI18N
        quantityText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                quantityTextKeyTyped(evt);
            }
        });
        add(quantityText);
        quantityText.setBounds(160, 310, 93, 34);

        addButton.setFont(new java.awt.Font("Monotype Corsiva", 3, 24)); // NOI18N
        addButton.setForeground(new java.awt.Color(102, 0, 0));
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        add(addButton);
        addButton.setBounds(290, 310, 100, 37);

        checkoutButton.setFont(new java.awt.Font("Monotype Corsiva", 3, 24)); // NOI18N
        checkoutButton.setForeground(new java.awt.Color(102, 0, 0));
        checkoutButton.setText("Checkout");
        checkoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutButtonActionPerformed(evt);
            }
        });
        add(checkoutButton);
        checkoutButton.setBounds(740, 340, 140, 37);

        messageText.setFont(new java.awt.Font("Monotype Corsiva", 3, 24)); // NOI18N
        messageText.setForeground(new java.awt.Color(102, 0, 0));
        messageText.setText("<Type your message>");
        messageText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                messageTextKeyTyped(evt);
            }
        });
        add(messageText);
        messageText.setBounds(440, 330, 230, 34);

        backjButton1.setFont(new java.awt.Font("Monotype Corsiva", 3, 24)); // NOI18N
        backjButton1.setForeground(new java.awt.Color(102, 0, 0));
        backjButton1.setText("<< Back");
        backjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton1ActionPerformed(evt);
            }
        });
        add(backjButton1);
        backjButton1.setBounds(30, 430, 140, 37);

        foodRequestTable.setFont(new java.awt.Font("Monotype Corsiva", 2, 24)); // NOI18N
        foodRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Room No", "Customer", "Cook", "Message", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(foodRequestTable);

        add(jScrollPane3);
        jScrollPane3.setBounds(10, 510, 980, 266);

        orderItemTable.setFont(new java.awt.Font("Monotype Corsiva", 2, 24)); // NOI18N
        orderItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderItemTable);

        add(jScrollPane2);
        jScrollPane2.setBounds(440, 50, 452, 253);

        jLabel2.setFont(new java.awt.Font("Monotype Corsiva", 3, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 0, 0));
        jLabel2.setText("Quantity");
        add(jLabel2);
        jLabel2.setBounds(40, 310, 110, 28);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/marriott_logo_redBackground_187x86.gif"))); // NOI18N
        jLabel3.setText("jLabel2");
        add(jLabel3);
        jLabel3.setBounds(0, 0, 190, 90);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/food.jpg"))); // NOI18N
        add(jLabel4);
        jLabel4.setBounds(-20, -20, 1940, 970);
    }// </editor-fold>//GEN-END:initComponents

    private void foodTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foodTypeComboActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_foodTypeComboActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        try{
            
        int selectedRow = menuTable.getSelectedRow();
        FoodMenuItem menuItem=new FoodMenuItem();
        menuItem.setQuantity(Integer.parseInt(quantityText.getText()));
        String name="";
        float price=0;
        
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        } 
       
        
            name =  menuTable.getValueAt(selectedRow, 0).toString();
            price =  Float.parseFloat(menuTable.getValueAt(selectedRow, 1).toString());
            
        
        
        menuItem.setPrice(price);
        menuItem.setName(name);
        foodOrder.addToMasterFoodCatalog(menuItem);
        JOptionPane.showMessageDialog(this, "Item added successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        populateOrderTable();
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Please enter valid quantity", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void checkoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutButtonActionPerformed
        // TODO add your handling code here:
            customer.getOrderList().addToMaster(foodOrder);

            createWorkRequest();
            JOptionPane.showMessageDialog(this, "Order placed successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            populateFoodRequestTable();
            foodOrder=new FoodOrder();
            populateOrderTable();
            
    }//GEN-LAST:event_checkoutButtonActionPerformed

    private void backjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backjButton1ActionPerformed

    private void quantityTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantityTextKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityTextKeyTyped

    private void messageTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageTextKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_messageTextKeyTyped

    private void createWorkRequest(){
        String message = messageText.getText();
        
        FoodRequest request = new FoodRequest();
        request.setMessage(message);
        request.setSender(userAccount);
        request.setStatus("Requested");
        
        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationDirectory()){
            if (organization instanceof CookOrganization){
                org = organization;
                break;
            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request);
            userAccount.getWorkQueue().getWorkRequestList().add(request);
        }
    }
    
    private void populateFoodRequestTable(){             
        
        DefaultTableModel model=(DefaultTableModel)foodRequestTable.getModel();
        model.setRowCount(0);
        
        for(WorkRequest workRequest: userAccount.getWorkQueue().getWorkRequestList()){
            if(workRequest instanceof FoodRequest){
            Object[] row=new Object[6];
            row[0]=workRequest;
            row[1]=workRequest.getSender().getCustomer().getRoom().getRoomNo();
            row[2]=workRequest.getSender().getCustomer().getName();
            row[3]=workRequest.getReceiver()== null ? null : workRequest.getReceiver().getEmployee().getName();          
            row[4]=workRequest.getMessage();
            row[5]=workRequest.getStatus();
            model.addRow(row);
            }   
        }
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backjButton1;
    private javax.swing.JButton checkoutButton;
    private javax.swing.JTable foodRequestTable;
    private javax.swing.JComboBox foodTypeCombo;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable menuTable;
    private javax.swing.JTextField messageText;
    private javax.swing.JTable orderItemTable;
    private javax.swing.JTextField quantityText;
    // End of variables declaration//GEN-END:variables
}
